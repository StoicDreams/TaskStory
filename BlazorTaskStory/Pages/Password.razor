@inherits BUIPage
@page "/account/password"
@page "/confirmemail/{AccountTokenString}"

@if (UserHasAccess)
{
	<BUISectionTitle>@PageDetails</BUISectionTitle>
	<BUIStandardSection>
		@if (HandleEmailConfirmation)
		{
			<BUIParagraph>You may now set your password to complete creating your account.</BUIParagraph>
		}
		<BUIParagraph>Passwords must be at least @MinimumPasswordLength characters long. Please make your password secure by not using the same password you use on any other websites or apps</BUIParagraph>

		<BUIParagraph>Secure your password by:</BUIParagraph>
		<BUIList Items="SecurePasswordSuggestions">@context</BUIList>

		<MudTextField InputType="InputType.Password" Label="Password" @bind-Value="InputPassword" />
		<MudTextField InputType="InputType.Password" Label="Confirm Password" @bind-Value="InputConfirmPassword" />

		<BUIPaper PaperType="PaperTypes.JustifyEnd" Class="mt-2">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnConfirm">@ConfirmMessage</MudButton>
		</BUIPaper>

		@if (!string.IsNullOrWhiteSpace(AlertMessage))
		{
			<MudAlert Severity="Severity.Error" Class="mt-2">@AlertMessage</MudAlert>
		}
	</BUIStandardSection>
}

@code {
	[Parameter]
	public string? AccountTokenString { get; set; }

	private bool UserHasAccess => HandleEmailConfirmation || Auth.IsLoggedIn;
	private Guid AccountToken { get; set; } = Guid.Empty;
	private bool HandleEmailConfirmation => AccountToken != Guid.Empty;
	private string PageDetails => HandleEmailConfirmation ? "Email Confirmed" : "Account Password";
	private string PageSubDetails => HandleEmailConfirmation ? "Set your account password!" : "";
	private string? AlertMessage { get; set; }
	private short MinimumPasswordLength = 10;
	private string InputPassword { get; set; } = string.Empty;
	private string InputConfirmPassword { get; set; } = string.Empty;
	private string ConfirmMessage => HandleEmailConfirmation ? "Finish Creating Account" : "Save Password";

	private List<RenderFragment> SecurePasswordSuggestions = new()
	{
		"Do not use the same password you use for any other websites or apps.".ConvertToRenderFragment(false),
		"Use random and unique combinations of letters, numbers, and special characters.".ConvertToRenderFragment(false),
		@<text>Use a password manager to create, manage, and autofill your passwords for you. (e.g., <BUILink Href="https://lastpass.com"></BUILink>).</text>,
	};

	protected override async Task OnInitializedAsync()
	{
		if (Guid.TryParse(AccountTokenString ?? "", out Guid accountToken))
		{
			AccountToken = accountToken;
		}
		if (!UserHasAccess)
		{
			Snackbar.Add("You must be logged in to update your password.", Severity.Error);
			NavManager.NavigateTo("/signin");
			return;
		}
		Title = HandleEmailConfirmation ? "Confirm Email" : "Update Password";
		await base.OnInitializedAsync();
	}

	private async Task OnConfirm()
	{
		InputPassword = InputPassword?.Trim() ?? "";
		if (!Auth.PasswordIsValid(InputPassword, out string error))
		{
			AlertMessage = error;
			return;
		}
		TResult result = await Auth.UpdatePassword(InputPassword, AccountToken);
		if (!result.IsOkay)
		{
			AlertMessage = FirstNotEmpty(result.Message, "An unexpected error occurred.");
			return;
		}
		Snackbar.Add(result.Message, Severity.Success);
		if (HandleEmailConfirmation)
		{
			NavManager.NavigateTo("/signin");
		}
	}
}
